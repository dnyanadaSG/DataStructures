package com.java.SingleLinkedList;

public class InsertNodeInLinkedList {

	Node head;
	
	static class Node {
		Node next;
		int data;
		
		Node(int data) {
			this.data = data;
			next = null;
		}
	}
	
	public void printList() {
		Node temp = head;
		while(temp != null) {
			 System.out.print(temp.data + " ");
			 temp = temp.next;
		}
	}
	
	  /* Inserts a new Node at front of the list. */
	public void insertBeforeHead(int newData) {
		 /* 1 & 2: Allocate the Node &
        Put in the data*/
		Node newNode = new Node(newData);
		newNode.next = head;
		head = newNode;
	}
	
	public void insertAfterNode(Node prevNode, int newData) {
		if (prevNode == null) {
			System.out.println("The given previous node cannot be null");
			return;
		}
		 /* 1 & 2: Allocate the Node &
        Put in the data*/
		Node newNode = new Node(newData);
		newNode.next = prevNode.next;
		prevNode.next = newNode;

	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		InsertNodeInLinkedList llist = new InsertNodeInLinkedList();
		llist.head = new Node(1);
		Node second = new Node(2);
		Node third = new Node(3);
		
		llist.head.next = second;
		second.next = third;
		
		System.out.println("Original List:");
		llist.printList();
		
		System.out.println("\nInserting element before head");
		llist.insertBeforeHead(4);
		llist.printList();
	}

}
