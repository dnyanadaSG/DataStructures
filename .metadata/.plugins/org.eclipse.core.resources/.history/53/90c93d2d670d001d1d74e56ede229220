package com.java.SingleLinkedList;

public class InsertNodeInLinkedList {

	Node head;
	
	static class Node {
		Node next;
		int data;
		
		Node(int data) {
			this.data = data;
			next = null;
		}
	}
	
	public void printList() {
		Node temp = head;
		while(temp != null) {
			 System.out.print(temp.data + " ");
			 temp = temp.next;
		}
	}
	
	  /* Inserts a new Node at front of the list. */
	public void insertBeforeHead(int newData) {
		 /* 1 & 2: Allocate the Node &
        Put in the data*/
		Node newNode = new Node(newData);
		
		 /* 3. Make next of new Node as head */
		newNode.next = head;
		
		 /* 4. Move the head to point to new Node */
		head = newNode;
	}
	
	/* Inserts a new node after the given prev_node. */
	public void insertAfterNode(Node prevNode, int newData) {
		/* 1. Check if the given Node is null */
		if (prevNode == null) {
			System.out.println("The given previous node cannot be null");
			return;
		}
		 /* 1 & 2: Allocate the Node &
        Put in the data*/
		Node newNode = new Node(newData);
		
		/* 4. Make next of new Node as next of prev_node */
		newNode.next = prevNode.next;
		
		 /* 5. make next of prev_node as new_node */
		prevNode.next = newNode;

	}
	
	/* Appends a new node at the end.  This method is 
    defined inside LinkedList class shown above */
	public void insertAtEnd(int newData) {
		/* 1. Allocate the Node &
        2. Put in the data
        3. Set next as null */
     Node newNode = new Node(newData);
     /* 4. This new node is going to be the last node, so
     make next of it as null */
     newNode.next = null;
     /* 4. If the Linked List is empty, then make the
     new node as head */
     if (head == null) {
         head = new Node(newData);
         return;
     }
     
     Node temp = head;
     
     while(temp != null) {
    	 temp = temp.next;
     }
     temp.next = newNode;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		InsertNodeInLinkedList llist = new InsertNodeInLinkedList();
		llist.head = new Node(1);
		Node second = new Node(2);
		Node third = new Node(3);
		
		llist.head.next = second;
		second.next = third;
		
		System.out.println("Original List:");
		llist.printList();
		
		System.out.println("\nInserting element before head");
		llist.insertBeforeHead(4);
		llist.printList();
		
		System.out.println("\nInserting element after given node");
		llist.insertAfterNode(llist.head.next, 5);
		llist.printList();
	}

}
